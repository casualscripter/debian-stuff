#!/bin/bash
#===============================================================================
# DIRECTORY:
#   ---
#
# FILE:
#   02_virtualbox_installer
#
# USAGE:
#   bash 02_virtualbox_installer
#
# OPTIONS:
#   none
#
# DESCRIPTION:
#   Installs virtualbox...
#
# REQUIREMENTS:
#   bash, ...
#
# BUGS:
#   ---
#
# NOTES:
#   Tested on Debian 8.
#
# AUTHOR:
#   Patrick Neumann, patrick@neumannsland.de
#
# COMPANY:
#   (privately)
#
# VERSION:
#   0.9 (beta)
#
# LINK TO THE MOST CURRENT VERSIONS:
#   https://raw.githubusercontent.com/casualscripter/debian-stuff/master/home/user/bin/
#
# CREATED:
#   20.11.2015
#
# COPYRIGHT (C):
#   2015 - Patrick Neumann
#
# LICENSE:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
# WARRANTY:
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# TODO:
#   - more DRY (don't repeat yourself)
#
# HISTORY:
#   0.9 - Patrick Neumann - Initial (public) release
#===============================================================================

#=== CONFIGURATION =============================================================
WHICH_BIN="/usr/bin/which"                                  # Debian 8.x default
PRINTF_BIN="$( ${WHICH_BIN} printf )"
SUDO_BIN="$( ${WHICH_BIN} sudo )"                       # needs configured sudo!
SU_BIN="$( ${WHICH_BIN} su )"
APTITUDE_BIN="$( ${WHICH_BIN} aptitude )"
SLEEP_BIN="$( ${WHICH_BIN} sleep )"
EXPR_BIN="$( ${WHICH_BIN} expr )"
CAT_BIN="$( ${WHICH_BIN} cat )"
PGREP_BIN="$( ${WHICH_BIN} pgrep )"
GNOMESHELL_BIN="$( ${WHICH_BIN} gnome-shell )"
WGET_BIN="$( ${WHICH_BIN} wget )"
GREP_BIN="$( ${WHICH_BIN} grep )"
AWK_BIN="$( ${WHICH_BIN} awk )"
TAIL_BIN="$( ${WHICH_BIN} tail )"
GROUPS_BIN="$( ${WHICH_BIN} groups )"
USERMOD_BIN="$( ${SUDO_BIN} ${WHICH_BIN} usermod )"     # needs configured sudo!
GSQ_BIN="$( ${WHICH_BIN} gnome-session-quit )"
APTKEY_BIN="$( ${WHICH_BIN} apt-key )"
SED_BIN="$( ${WHICH_BIN} sed )"
VBOXMANAGE_BIN="$( ${WHICH_BIN} VBoxManage )"

#=== FUNCTION ==================================================================
# NAME: error_exit
# DESCRIPTION: Display red error messages surrounded by "ERROR:" and "EXIT!!!".
# PARAMETER 1: message (string)
#===============================================================================
error_exit () {
  "${PRINTF_BIN}" "\n\033[01;31;40mERROR: ${1}... EXIT!!!\033[00m\n\n"
  exit 1
}

#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: Display red error messages starting with "ERROR:".
# PARAMETER 1: message (string)
#===============================================================================
error () {
  "${PRINTF_BIN}" "\033[01;31;40mERROR: ${1}!!!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: hint
# DESCRIPTION: Display blue hint messages starting with "HINT:".
# PARAMETER 1: message (string)
#===============================================================================
hint () {
  "${PRINTF_BIN}" "\033[01;34;40mHINT: ${1}!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: success
# DESCRIPTION: Display green success messages starting with "SUCCESS:".
# PARAMETER 1: message (string)
#===============================================================================
success () {
  "${PRINTF_BIN}" "\033[01;32;40mSUCCESS: ${1}!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: install_if_necessary
# DESCRIPTION: Check if binary exists and (try to) install package if not.
# PARAMETER 1: absolute path to binary (string)
# PARAMETER 2: package name (string)
#===============================================================================
install_if_necessary () {
  if [ ! -x "${1}" ] ; then
    ${SUDO_BIN} ${APTITUDE_BIN} install ${2} --assume-yes
    if [ "${?}" -eq "0" ] ; then
      success "installation of ${2} completed"
    else
      error_exit "installation of ${2} failed"
    fi
  else
    hint "${2} already installed"
  fi
  ${SLEEP_BIN} 2
}

#-------------------------------------------------------------------------------
# Check vor Debian GNU/Linux.
#-------------------------------------------------------------------------------
if ! [ -f "/etc/debian_version" ] ; then
  error_exit "Debian GNU/Linux not found"
fi

#-------------------------------------------------------------------------------
# Check vor Version 8 (jessie) or greater.
#-------------------------------------------------------------------------------
if ! ${EXPR_BIN} "$( ${CAT_BIN} /etc/debian_version )" \>= 8.0 > /dev/null 2>&1 ; then
  error_exit "Debian GNU/Linux >= 8.0 not found"
fi

#-------------------------------------------------------------------------------
# Check vor a running Gnome desktop environment.
#-------------------------------------------------------------------------------
if ! ${PGREP_BIN} --full "${GNOMESHELL_BIN}" > /dev/null 2>&1 ; then
  error_exit "Gnome desktop environment not running"
fi

#-------------------------------------------------------------------------------
# Add the repository from virtualbox.org if necessary.
#-------------------------------------------------------------------------------
if [ ! -f "/etc/apt/sources.list.d/virtualbox.list" ] ; then
  ${SUDO_BIN} ${SU_BIN} - --command \
  'echo "deb http://download.virtualbox.org/virtualbox/debian jessie contrib" \
  > /etc/apt/sources.list.d/virtualbox.list'

  if ${GREP_BIN} --extended-regexp "^deb http://download.virtualbox.org/" \
  /etc/apt/sources.list.d/virtualbox.list > /dev/null 2>&1 ; then
    success "repository download.virtualbox.org added"
  else
    error_exit "configuration of repository download.virtualbox.org failed"
  fi
else
  hint "repository download.virtualbox.org already configured"
fi

#-------------------------------------------------------------------------------
# Add the GPG key for virtualbox.org if necessary.
#-------------------------------------------------------------------------------
if ! ${GREP_BIN} --fixed-strings "info@virtualbox.org" \
<( ${SUDO_BIN} ${APTKEY_BIN} list ) > /dev/null 2>&1 ; then
  ${WGET_BIN} --quiet http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc \
  --output-document=- | ${SUDO_BIN} ${APTKEY_BIN} add -

  if ${GREP_BIN} --fixed-strings "info@virtualbox.org" \
  <( ${SUDO_BIN} ${APTKEY_BIN} list ) > /dev/null 2>&1 ; then
    success "GPG key from Oracle added"
  else
    error_exit "adding GPG key from Oracle failed"
  fi
else
  hint "GPG key from Oracle already known"
fi

#-------------------------------------------------------------------------------
# Updates the list of available packages from the apt sources.
#-------------------------------------------------------------------------------
${SUDO_BIN} ${APTITUDE_BIN} update
success "list of available packages updated"
${SLEEP_BIN} 2

#-------------------------------------------------------------------------------
# Install virtualbox if necessary.
#-------------------------------------------------------------------------------
install_if_necessary "/usr/bin/virtualbox" \
  "$( ${APTITUDE_BIN} search "virtualbox-[0-9]" \
      | ${AWK_BIN} '{ print $2; }' \
      | ${TAIL_BIN} --lines=1 )"

#-------------------------------------------------------------------------------
# Install/replace virtualbox extension pack if necessary.
#-------------------------------------------------------------------------------
readonly VERSION="$( ${VBOXMANAGE_BIN} --version )"
readonly EXPACK_LIST="$( ${VBOXMANAGE_BIN} list extpacks )"
if ! echo "${EXPACK_LIST}" \
| ${GREP_BIN} --fixed-strings "Extension Packs: 0" > /dev/null 2>&1 ; then
  REPLACE="--replace"
fi
if ! echo "${EXPACK_LIST}" \
| ${GREP_BIN} --fixed-strings "${VERSION:0:6}" > /dev/null 2>&1 ; then
  cd ~/Downloads
  SERVER_DIR="download.virtualbox.org/virtualbox/${VERSION:0:6}"
  EXTPACK="Oracle_VM_VirtualBox_Extension_Pack-${VERSION:0:6}-${VERSION:7:6}.vbox-extpack"
  ${WGET_BIN} --no-clobber "http://${SERVER_DIR}/${EXTPACK}"
  ${SUDO_BIN} -- ${VBOXMANAGE_BIN} extpack install ${REPLACE} "${EXTPACK}"
  if [ ${?} -eq 0 ] ; then
    success "virtualbox extension pack installed/replaced"
  else
    error_exit "installation/replacing of virtualbox extension pack failed"
  fi	
else
  hint "virtualbox extension pack is up to date"
fi
${SLEEP_BIN} 2

#-------------------------------------------------------------------------------
# Install dc3dd if necessary.
#-------------------------------------------------------------------------------
install_if_necessary "/usr/bin/dc3dd" "dc3dd"

#-------------------------------------------------------------------------------
# Add current user to group "vboxusers" if necessary.
#-------------------------------------------------------------------------------
LOG_ME_OUT=0
if ! ${GREP_BIN} --fixed-strings "vboxusers" <( ${GROUPS_BIN} ) > /dev/null 2>&1 ; then
  ${SUDO_BIN} ${USERMOD_BIN} --append --groups vboxusers "${USER}"
  if [ "${?}" -eq "0" ] ; then
    success "user ${USER} added to group vboxusers"
  else
    error_exit "adding user ${USER} to group vboxusers failed"
  fi
  LOG_ME_OUT=1
else
  hint "user ${USER} is already member of group vboxusers"
fi

#-------------------------------------------------------------------------------
# Log user out if necessary (thus the effects of changing permissions).
#-------------------------------------------------------------------------------
success "all done"
if [ "${LOG_ME_OUT}" -eq "1" ] ; then
  hint "please let logout in 3 seconds and login again"
  ${SLEEP_BIN} 3
  ${GSQ_BIN} --logout
fi

exit 0
