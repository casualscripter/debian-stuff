#!/bin/bash
#===============================================================================
# DIRECTORY:
#   ---
#
# FILE:
#   04_qemu-nautilus-scripts_installer
#
# USAGE:
#   bash 04_qemu-nautilus-scripts_installer
#
# OPTIONS:
#   none
#
# DESCRIPTION:
#   Installs qemu-nautilus-scripts...
#
# REQUIREMENTS:
#   bash, ...
#
# BUGS:
#   ---
#
# NOTES:
#   Tested on Debian 8.
#
# AUTHOR:
#   Patrick Neumann, patrick@neumannsland.de
#
# COMPANY:
#   (privately)
#
# VERSION:
#   0.9 (beta)
#
# LINK TO THE MOST CURRENT VERSIONS:
#   https://raw.githubusercontent.com/casualscripter/debian-stuff/master/
#
# CREATED:
#   02.04.2016
#
# COPYRIGHT (C):
#   2015-2016 - Patrick Neumann
#
# LICENSE:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
# WARRANTY:
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# TODO:
#   - more DRY (don't repeat yourself)
#
# HISTORY:
#   0.9 - Patrick Neumann - Initial (public) release
#
#===============================================================================

#=== CONFIGURATION =============================================================
WHICH_BIN="/usr/bin/which"                                  # Debian 8.x default
PRINTF_BIN="$( ${WHICH_BIN} "printf" )"
SUDO_BIN="$( ${WHICH_BIN} "sudo" )"                     # needs configured sudo!
SLEEP_BIN="$( ${WHICH_BIN} "sleep" )"
EXPR_BIN="$( ${WHICH_BIN} "expr" )"
CAT_BIN="$( ${WHICH_BIN} "cat" )"
PGREP_BIN="$( ${WHICH_BIN} "pgrep" )"
GNOMESHELL_BIN="$( ${WHICH_BIN} "gnome-shell" )"
MKDIR_BIN="$( ${WHICH_BIN} "mkdir" )"
WGET_BIN="$( ${WHICH_BIN} "wget" )"
UNZIP_BIN="$( ${WHICH_BIN} "unzip" )"
RM_BIN="$( ${WHICH_BIN} "rm" )"
GREP_BIN="$( ${WHICH_BIN} "grep" )"
RMDIR_BIN="$( ${WHICH_BIN} "rmdir" )"
CHOWN_BIN="$( ${WHICH_BIN} "chown" )"
CHMOD_BIN="$( ${WHICH_BIN} "chmod" )"
ID_BIN="$( ${WHICH_BIN} "id" )"
OPENSSL_BIN="$( ${WHICH_BIN} "openssl" )"
AWK_BIN="$( ${WHICH_BIN} "awk" )"
CP_BIN="$( ${WHICH_BIN} "cp" )"

#=== FUNCTION ==================================================================
# NAME: error_exit
# DESCRIPTION: Display red error messages surrounded by "ERROR:" and "EXIT!!!".
# PARAMETER 1: message (string)
#===============================================================================
error_exit () {
  "${PRINTF_BIN}" "\n\033[01;31;40mERROR: ${1}... EXIT!!!\033[00m\n\n"
  exit 1
}

#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: Display red error messages starting with "ERROR:".
# PARAMETER 1: message (string)
#===============================================================================
error () {
  "${PRINTF_BIN}" "\033[01;31;40mERROR: ${1}!!!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: hint
# DESCRIPTION: Display blue hint messages starting with "HINT:".
# PARAMETER 1: message (string)
#===============================================================================
hint () {
  "${PRINTF_BIN}" "\033[01;34;40mHINT: ${1}!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: success
# DESCRIPTION: Display green success messages starting with "SUCCESS:".
# PARAMETER 1: message (string)
#===============================================================================
success () {
  "${PRINTF_BIN}" "\033[01;32;40mSUCCESS: ${1}!\033[00m\n"
}

#=== FUNCTION ==================================================================
# NAME: download_zip
# DESCRIPTION: Download zip file if necessary and delete it after unzip.
# PARAMETER 1: url to zip file (string)
#===============================================================================
download_zip () {
  ${WGET_BIN} --no-clobber "${1}"
  if [ "${?}" -eq "0" ] ; then
    success "download of ${2} completed"
  else
    error_exit "download of ${2} failed"
  fi
  ${SLEEP_BIN} 1
  ${UNZIP_BIN} "${1##*/}"
  if [ "${?}" -eq "0" ] ; then
    success "unzipping ${2} completed"
  else
    error_exit "unzipping ${2} failed"
  fi
  ${SLEEP_BIN} 1
  ${RM_BIN} "${1##*/}"
  if [ "${?}" -eq "0" ] ; then
    success "deleting ${2} completed"
  else
    error_exit "deleting ${2} failed"
  fi
  ${SLEEP_BIN} 2
}

#-------------------------------------------------------------------------------
# Check for Debian GNU/Linux.
#-------------------------------------------------------------------------------
if ! [ -f "/etc/debian_version" ] ; then
  error_exit "Debian GNU/Linux not found"
fi

#-------------------------------------------------------------------------------
# Check for Version 8 (jessie) or greater.
#-------------------------------------------------------------------------------
if ! ${EXPR_BIN} "$( ${CAT_BIN} /etc/debian_version )" \>= 8.0 > /dev/null 2>&1 ; then
  error_exit "Debian GNU/Linux >= 8.0 not found"
fi

#-------------------------------------------------------------------------------
# Check for a running Gnome desktop environment.
#-------------------------------------------------------------------------------
if ! ${PGREP_BIN} --full "${GNOMESHELL_BIN}" > /dev/null 2>&1 ; then
  error_exit "Gnome desktop environment not running"
fi

#-------------------------------------------------------------------------------
# Check for some simple scripts (used by nautilus scripts).
#-------------------------------------------------------------------------------
if ! [ -f "/usr/local/bin/multi_sigfind" ] ; then
	error_exit "multi_sigfind missing. Run 01_xmount-installer first"
fi
if ! [ -f "/usr/local/bin/print_plist_entry.py" ] ; then
	error_exit "print_plist_entry.py missing. Run 01_xmount-installer first"
fi
if ! [ -f "/usr/local/bin/kcpass.py" ] ; then
	error_exit "kcpass.py missing. Run 01_xmount-installer first"
fi

#-------------------------------------------------------------------------------
# Check source directory (03_qemu-system-installer).
#-------------------------------------------------------------------------------
QEMU_DIR="${HOME}/QEMU"
if [ ! -d "${QEMU_DIR}" ] ; then
  error_exit "QEMU directory missing. Run 03_qemu-system-installer first"
fi

#-------------------------------------------------------------------------------
# Download and "install" qemu-nautilus-scripts.
#-------------------------------------------------------------------------------
cd "${QEMU_DIR}"
download_zip "https://github.com/casualscripter/qemu-nautilus-scripts/archive/master.zip"
cd qemu-nautilus-scripts-master/
for pattern in ./* ./.[!.]* ; do
  ${CP_BIN} -a "${pattern}" "${HOME}/.local/share/nautilus/scripts/"
done

#-------------------------------------------------------------------------------
# Download and "install" PALADIN (Could need some time for downloading!!!).
#-------------------------------------------------------------------------------
SHA1="e0695b74281a63d8064b0862c1cb792ff9ba950f"
if ! [ -f "${HOME}/Downloads/${SHA1}.iso" ] ; then
  ${WGET_BIN} --timestamping --directory-prefix="${HOME}/Downloads/" "ftp://ftp.domain-ermittlung.de/${SHA1}.iso"
  if [ "$( ${OPENSSL_BIN} dgst -sha1 "${HOME}/Downloads/${SHA1}.iso" | ${AWK_BIN} '{ print $NF; }' )" = "${SHA1}" ] ; then
    success "PALADIN verified"
  else
    ${RM_BIN} "${HOME}/Downloads/${SHA1}.iso"
    error_exit "verification of PALADIN failed"
  fi
fi
${CP_BIN} -a "${HOME}/Downloads/${SHA1}.iso" "${HOME}/.local/share/nautilus/scripts/02_dd/.PALADIN_EDGE_14.04.iso"
if [ "${?}" -eq "0" ] ; then
  success "PALADIN moved to the right location"
else
  error_exit "moving of PALADIN failed"
fi

#-------------------------------------------------------------------------------
# Download and "install" UEFI reference firmware.
#-------------------------------------------------------------------------------
if ! [ -f "${QEMU_DIR}/OVMF/OVMF.fd" ] ; then
	error_exit "OVMF.fd missing. Run 03_qemu-system-installer first"
fi
${CP_BIN} -a "${QEMU_DIR}/OVMF/OVMF.fd" "${HOME}/.local/share/nautilus/scripts/04_boot/.OVMF.fd"
if [ "${?}" -eq "0" ] ; then
  success "OVMF.fd moved to the right location"
else
  error_exit "moving of OVMF.fd failed"
fi

#-------------------------------------------------------------------------------
# Download and "install" Enoch bootloader.
#-------------------------------------------------------------------------------
if ! [ -f "${QEMU_DIR}/OSX/Enoch-rev.2839_boot" ] ; then
	error_exit "Enoch bootloader missing. Run 03_qemu-system-installer first"
fi
${CP_BIN} -a "${QEMU_DIR}/OSX/Enoch-rev.2839_boot" "${HOME}/.local/share/nautilus/scripts/04_boot/.Enoch-rev.2839_boot"
if [ "${?}" -eq "0" ] ; then
  success "Enoch bootloader moved to the right location"
else
  error_exit "moving of Enoch bootloader failed"
fi

#-------------------------------------------------------------------------------
# Download and "install" Spice drivers.
#-------------------------------------------------------------------------------
if ! [ -d "${QEMU_DIR}/QXL" ] ; then
  error_exit "QXL drivers missing. Run 03_qemu-system-installer first"
fi
if ! [ -d "${HOME}/.local/share/nautilus/scripts/04_boot/.shared_folder/drivers" ] ; then
  ${MKDIR_BIN} -p "${HOME}/.local/share/nautilus/scripts/04_boot/.shared_folder/drivers"
fi
${CP_BIN} -a "${HOME}/QEMU/QXL/"* "${HOME}/.local/share/nautilus/scripts/04_boot/.shared_folder/drivers"
if [ "${?}" -eq "0" ] ; then
  success "Spice drivers moved to the right location"
else
  error_exit "moving of Spice drivers failed"
fi

#-------------------------------------------------------------------------------
# Fix privileges.
#-------------------------------------------------------------------------------
${SUDO_BIN} ${CHOWN_BIN} -R "$( ${ID_BIN} -un )":"$( ${ID_BIN} -gn )" "${HOME}/.local/share/nautilus/scripts/"
${SUDO_BIN} ${CHMOD_BIN} -R 755 "${HOME}/.local/share/nautilus/scripts/"

exit 0
